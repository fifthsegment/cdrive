version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./server:/usr/src/app
    ports:
      - "3000:3000"
    container_name: cdrive
    environment:
      NODE_ENV: "production"
      PORT: "3000"
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_DB: ${MONGO_DB}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASS: ${MONGO_PASS}
      MONGO_ADMIN_USER: ${MONGO_ADMIN_USER}
      MONGO_ADMIN_PASS: ${MONGO_ADMIN_PASS}
      MONGO_ADMIN_DB: ${MONGO_ADMIN_DB}
      MONGO_URI: ${MONGO_URI}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_USE_SSL: ${MINIO_USE_SSL}
      MINIO_PORT: ${MINIO_PORT}
      MINIO_BUCKET: ${MINIO_BUCKET}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_SECRET: ${KEYCLOAK_SECRET}
      KEYCLOAK_SERVER_URL: ${KEYCLOAK_SERVER_URL}
      KEYCLOAK_USER: ${KEYCLOAK_USER}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
      IMAGEPROC_SERVER: ${IMAGEPROC_SERVER}
      IMAGEPROC_SERVER_PORT: ${IMAGEPROC_SERVER_PORT}
      DOCUMENT_SERVER: ${DOCUMENT_SERVER}
      DOCUMENT_SERVER_PORT: ${DOCUMENT_SERVER_PORT}
      JWT_SECRET: ${JWT_SECRET}

    depends_on:
      - mongo
      - keycloak
      - minio
    networks:
      - my-network
    links:
      - keycloak
      - minio
  imagor:
    image: shumc/imagor:latest
    environment:
      #HTTP_LOADER_ALLOWED_SOURCES: "*"
      PORT: 8000
      IMAGOR_UNSAFE: 1 # unsafe URL for testing
      IMAGOR_SECRET: mysecret # secret key for URL signature
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
      S3_ENDPOINT: http://${MINIO_ENDPOINT}:${MINIO_PORT}
      HTTP_LOADER_DISABLE: 1
      AWS_REGION: us-east-1
      AWS_LOADER_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_LOADER_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}

      #AWS_RESULT_STORAGE_REGION: us-east-1
      #AWS_RESULT_STORAGE_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      #AWS_RESULT_STORAGE_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
      #S3_RESULT_STORAGE_ENDPOINT: http://${MINIO_ENDPOINT}:${MINIO_PORT}
      AWS_STORAGE_REGION: us-east-1
      AWS_STORAGE_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_STORAGE_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
      S3_STORAGE_ENDPOINT: http://${MINIO_ENDPOINT}:${MINIO_PORT}
      #S3_LOADER_ENDPOINT: http://${MINIO_ENDPOINT}:${MINIO_PORT}
      S3_LOADER_BUCKET: ${MINIO_BUCKET}  # enable S3 loader by specifying bucket
      #S3_RESULT_STORAGE_BUCKET: ${MINIO_BUCKET}
      #S3_STORAGE_BUCKET: ${MINIO_BUCKET}
      S3_BUCKET: ${MINIO_BUCKET}
      S3_FORCE_PATH_STYLE: 1
      IMAGOR_RESULT_STORAGE_PATH_STYLE: suffix
      #SERVER_ACCESS_LOG: 1
      DEBUG: 1
    ports:
      - "8000:8000"
    depends_on:
      - minio
    networks:
      - my-network
  keycloak:
    #image: sleighzy/keycloak:latest
    hostname: keycloak
    image: quay.io/keycloak/keycloak:21.0.1
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: ${KEYCLOAK_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD}
      #JAVA_OPTS: -Dkeycloak.import=/tmp/my-realm.json
    volumes:
      #- ./my-realm.json:/tmp/my-realm.json
      #- ./keycloak-realm:/opt/keycloak/data/import
      - ./keycloak-scripts:/opt/jboss/startup-scripts
      - ./keycloak-data:/opt/jboss/keycloak/standalone/data
    ports:
      - "8080:8080"
      - "8443:8443"
    depends_on:
      - mongo
      - mysql
    networks:
      - my-network
    command:
      - start --import-realm  --proxy edge --hostname-strict=false --hostname-url ${SERVER_PROTOCOL}${SERVER_BASENAME}/auth
      # - start-dev --import-realm 
      # --hostname-strict=false 
      #--hostname-url ${SERVER_URL}/auth
  collabora:
    image: collabora/code:latest
    environment:
      username: admin
      password: admin
      domain: cdrive
      server_name: localhost:9980
      dont_gen_ssl_cert: true
      extra_params: --o:ssl.enable=false --o:ssl.termination=false
    ports:
      - "9980:9980"
    cap_add:
      - MKNOD
    networks:
      - my-network
  minio:
    image: minio/minio:latest
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_DEFAULT_BUCKETS: ${MINIO_BUCKET}
    ports:
      - "9000:9000"
    command: server /data
    networks:
      - my-network


  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY};
      /usr/bin/mc mb myminio/${MINIO_BUCKET};
      /usr/bin/mc policy set public myminio/${MINIO_BUCKET};
      exit 0;
      "
    networks:
      - my-network

  mongo:
    image: mongo:6
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT:-mongodb}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-mongodb}
      MONGO_INITDB_DATABASE: ${MONGO_ROOT_DB:-mongodb}
    ports:
      - "27017:27017"
    volumes:
      - type: volume
        source: mongo-data
        target: /data/db
      # - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    networks:
      - my-network

  mysql:
    image: mysql/mysql-server:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: keycloak
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - my-network


volumes:
  mongo-data:
  minio-data:
  mysql-data:

networks:
  my-network:
    driver: bridge
